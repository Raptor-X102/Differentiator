#include "TeX_output.h"
#include "Greek_alphabet.h"
#include "Replacements_list.h"

void TeX_introduction(FILE* output_file) {

    TEX_PRINTF("\\documentclass{article}\n");
    TEX_PRINTF("\\usepackage{amsmath}\n");
    TEX_PRINTF("\\usepackage[utf8]{inputenc}\n");
    TEX_PRINTF("\\usepackage[russian,english]{babel}\n");
    TEX_PRINTF("\\usepackage[T2A]{fontenc}\n");
    TEX_PRINTF("\\usepackage[left=10mm, top=20mm, right=18mm, bottom=15mm, footskip=10mm]{geometry}\n");
    TEX_PRINTF("\\usepackage{indentfirst}\n");
    TEX_PRINTF("\\newcommand{\\approxtext}[1]{\\ensuremath{\\stackrel{\\text{#1}}{\\approx}}}\n");
    TEX_PRINTF("\\DeclareMathOperator{\\arccot}{arccot}\n");
    TEX_PRINTF("\\DeclareMathOperator{\\arcsinh}{arcsinh}\n");
    TEX_PRINTF("\\DeclareMathOperator{\\arccosh}{arccosh}\n");
    TEX_PRINTF("\\DeclareMathOperator{\\arctanh}{arctanh}\n");
    TEX_PRINTF("\\DeclareMathOperator{\\arccoth}{arccoth}\n");
    TEX_PRINTF("\\title{\\textbf{Differentiator}}\n");
    TEX_PRINTF("\\date{}\n");
    TEX_PRINTF("\\author{\\text{Котляров Михаил, Б01-402}}\n\n");
    TEX_PRINTF("\\begin{document}\n\n");
    TEX_PRINTF("\\maketitle\n");
    TEX_PRINTF("\\section*{Annotation}\n");
    TEX_PRINTF("This is auto-generated by Differentiator document. Don't try to change TeX file. "
               "Change TeX introduction function instead.\n");
    TEX_PRINTF("In this article we will take derivative of functions, do Taylor's extension\n");
    TEX_PRINTF("\\section*{Differentiating}\n");
}

void TeX_start_diff(FILE* output_file) {

    TEX_PRINTF("Now let's take derivative of this expression: \n");
}

void TeX_output_expr(Node* root, FILE* output_file, bool Do_replacements, uint64_t* replacements_count) {

    Stack_t stack = {};
    Node* root_copy = NULL, * tmp_root = NULL;
    char* replacement = NULL;
    int64_t global_depth = 0;
    STACK_CTOR(&stack, Init_stack_size, sizeof(Node*));

    TeX_print_expr(root, output_file, &stack, &root_copy,
                &global_depth, replacements_count, Do_replacements);

    if(Do_replacements)
        TEX_PRINTF("\\]\n");

    while(stack.size) {

        global_depth = 0;
        StackPop(&stack, &replacement);
        StackPop(&stack, &tmp_root);
        TEX_PRINTF("$");
        fputs(replacement, output_file);
        TEX_PRINTF(" = ");
        TeX_print_expr(tmp_root, output_file, &stack, &root_copy,
                       &global_depth, replacements_count, Do_replacements);
        TEX_PRINTF("$");

        if(stack.size)
            TEX_PRINTF(",\n");
    }

    //TEX_PRINTF("\n");
    StackDtor(&stack);
}

bool Get_tree_depth(Node* root) {

    uint64_t curr_depth = 0, max_depth = 0;
    return Count_tree_depth(root, &curr_depth, &max_depth);
}

bool Count_tree_depth(Node* root, uint64_t* curr_depth, uint64_t* max_depth) {

    if(root) {

        Node_data* node_data = NULL;
        memcpy(&node_data, &root->node_data, sizeof(Node_data*));
        if(node_data->expression_type == OP)
            (*curr_depth)++;

        if(*curr_depth >= Max_depth) {

            *max_depth = *curr_depth;
            *curr_depth = -1;
            return true;
        }

        if(root->left_node) {

            Count_tree_depth(root->left_node, curr_depth, max_depth);
            if(*curr_depth == -1)
                return true;
        }

        if(root->right_node) {

            Count_tree_depth(root->right_node, curr_depth, max_depth);
            if(*curr_depth == -1)
                return true;
        }
    }
    return false;
}

void TeX_print_expr(Node* root, FILE* output_file, Stack_t* stack, Node** root_copy,
                    int64_t* global_depth, uint64_t* replacements_count, bool Do_replacements) {

    Node_data* node_data = NULL;
    memcpy(&node_data, &root->node_data, sizeof(Node_data*));

    if(Do_replacements) {
        (*global_depth)++;
        if(*global_depth == Min_depth) {

            *root_copy = root;
            if(Get_tree_depth(root)) {

                if(!node_data->replacement) {

                    node_data->replacement = Greek_alphabet[*replacements_count];
                    (*replacements_count) = ((*replacements_count) + 1) %
                                            (sizeof(Greek_alphabet) / sizeof(Greek_alphabet[0]));

                        StackPush(stack, root_copy);
                        StackPush(stack, &node_data->replacement);
                }

                fputs(node_data->replacement, output_file);

                (*global_depth)--;
                return;
            }
        }
    }

    switch(node_data->expression_type) { // A loooot of cases. Couldn't do code gen
                                         // because I wanted to do TeX output *absolutely* like in math
        case OP: {

            if(node_data->value == LOG || node_data->value == DIV) { // prefix case

                if(node_data->value == LOG)
                    TEX_PRINTF("\\log_{");

                if(node_data->value == DIV)
                    TEX_PRINTF("\\frac{");

                if(root->left_node)
                    TeX_print_expr(root->left_node, output_file, stack, root_copy,
                                   global_depth, replacements_count, Do_replacements);

                TEX_PRINTF("} {");

                if(root->right_node) {

                    Node_data* node_data_c = node_data;
                    memcpy(&node_data, &root->right_node->node_data, sizeof(Node_data*));
                    if(node_data_c->value == LOG && node_data->expression_type == OP &&
                       (node_data->value == ADD || node_data->value == SUB)) {

                        TEX_PRINTF("(");
                        TeX_print_expr(root->right_node, output_file, stack, root_copy,
                                       global_depth, replacements_count, Do_replacements);
                        TEX_PRINTF(")");
                    }

                    else
                        TeX_print_expr(root->right_node, output_file, stack, root_copy,
                                       global_depth, replacements_count, Do_replacements);
                }

                TEX_PRINTF("}");
            }

            else if(node_data->value & Is_binary){ // infix case

                if(node_data->value == POW) {

                    TEX_PRINTF("{");
                    if(root->left_node) {

                        memcpy(&node_data, &root->left_node->node_data, sizeof(Node_data*));
                        if(node_data->expression_type == OP &&
                        (node_data->value != POW)) {

                            TEX_PRINTF("(");
                            TeX_print_expr(root->left_node, output_file, stack, root_copy,
                                           global_depth, replacements_count, Do_replacements);
                            TEX_PRINTF(")");
                        }

                        else
                            TeX_print_expr(root->left_node, output_file, stack, root_copy,
                                           global_depth, replacements_count, Do_replacements);
                    }

                    TEX_PRINTF("}^{");

                    if(root->right_node) {

                        memcpy(&node_data, &root->right_node->node_data, sizeof(Node_data*));
                        if(node_data->expression_type == OP &&
                        (node_data->value == ADD || node_data->value == SUB)) {

                            TEX_PRINTF("(");
                            TeX_print_expr(root->right_node, output_file, stack, root_copy,
                                           global_depth, replacements_count, Do_replacements);
                            TEX_PRINTF(")");
                        }

                        else
                            TeX_print_expr(root->right_node, output_file, stack, root_copy,
                                           global_depth, replacements_count, Do_replacements);
                    }

                    TEX_PRINTF("}");
                }

                else if(node_data->value == MUL) {

                    TEX_PRINTF("{");
                    if(root->left_node) {

                        double tmp_double = 0;
                        memcpy(&node_data, &root->left_node->node_data, sizeof(Node_data*));
                        memcpy(&tmp_double, &node_data->value, sizeof(double));

                        if((node_data->expression_type == OP &&
                           (node_data->value == ADD || node_data->value == SUB)) ||
                           (node_data->expression_type == NUM && tmp_double < 0)) {

                            TEX_PRINTF("(");
                            TeX_print_expr(root->left_node, output_file, stack, root_copy,
                                           global_depth, replacements_count, Do_replacements);
                            TEX_PRINTF(")");
                        }

                        else
                            TeX_print_expr(root->left_node, output_file, stack, root_copy,
                                           global_depth, replacements_count, Do_replacements);
                    }

                    TEX_PRINTF("} {");

                    if(root->right_node) {

                        double tmp_double = 0;
                        memcpy(&node_data, &root->right_node->node_data, sizeof(Node_data*));
                        memcpy(&tmp_double, &node_data->value, sizeof(double));
                        if((node_data->expression_type == OP &&
                           (node_data->value == ADD || node_data->value == SUB)) ||
                           (node_data->expression_type == NUM && tmp_double < 0)) {

                            TEX_PRINTF("(");
                            TeX_print_expr(root->right_node, output_file, stack, root_copy,
                                           global_depth, replacements_count, Do_replacements);
                            TEX_PRINTF(")");
                        }

                        else
                            TeX_print_expr(root->right_node, output_file, stack, root_copy,
                                           global_depth, replacements_count, Do_replacements);
                    }

                    TEX_PRINTF("}");
                }

                else {

                    if(root->left_node) {


                        TEX_PRINTF("{");
                        TeX_print_expr(root->left_node, output_file, stack, root_copy,
                                       global_depth, replacements_count, Do_replacements);
                        TEX_PRINTF("}");
                    }

                    switch(node_data->value) {

                        #define EL_FUNC_SIGN(func_name, sign, TeX_sign) case func_name: {\
                                                                            fputs(TeX_sign, output_file);\
                                                                            break;\
                                                                        }

                        #define EL_FUNC(func_name, func_full_name)

                        #include "Code_gen_funcs.h"
                        #undef EL_FUNC_SIGN
                        #undef EL_FUNC

                        default:
                            DEBUG_PRINTF("ERROR: BINARY OPERATION WAS NOT FOUND\n");
                            DEBUG_PRINTF("node_data->value = %#X\n", node_data->value);
                    }

                    if(root->right_node) {

                        TEX_PRINTF("{");
                        TeX_print_expr(root->right_node, output_file, stack, root_copy,
                                       global_depth, replacements_count, Do_replacements);
                        TEX_PRINTF("}");
                    }
                }
            }

            else {

                if(node_data->value == ABS) {

                    if(root->left_node) {

                        TEX_PRINTF("|{");
                        TeX_print_expr(root->left_node, output_file, stack, root_copy,
                                       global_depth, replacements_count, Do_replacements);
                        TEX_PRINTF("}|");
                    }
                }

                else {
                    switch(node_data->value) {

                        #define EL_FUNC_SIGN(func_name, sign, TeX_sign)

                        #define EL_FUNC(func_name, func_full_name) case func_name: {\
                                                                        fputs(func_full_name, output_file);\
                                                                        break;\
                                                                    }

                        #include "Code_gen_funcs.h"
                        #undef EL_FUNC_SIGN
                        #undef EL_FUNC

                        default:
                            DEBUG_PRINTF("node_data->value = %#x\n", node_data->value);
                            DEBUG_PRINTF("ERROR: UNARY OPERATION WAS NOT FOUND\n");
                    }

                    if(root->left_node) {

                        int64_t old_value = node_data->value;
                        TEX_PRINTF("{");
                        memcpy(&node_data, &root->left_node->node_data, sizeof(Node_data*));
                        if(old_value != SQRT && node_data->expression_type == OP &&
                                                            (node_data->value == ADD ||
                                                             node_data->value == SUB ||
                                                             node_data->value == MUL)) {

                            TEX_PRINTF("(");
                            TeX_print_expr(root->left_node, output_file, stack, root_copy,
                                        global_depth, replacements_count, Do_replacements);
                            TEX_PRINTF(")");
                        }

                        else
                            TeX_print_expr(root->left_node, output_file, stack, root_copy,
                                        global_depth, replacements_count, Do_replacements);

                        TEX_PRINTF("}");
                    }
                }
            }

            break;
        }

        case NUM: {

            double tmp_double = 0;
            memcpy(&tmp_double, &node_data->value, sizeof(double));

            if(fabs(tmp_double - M_PI) < Epsilon)
                TEX_PRINTF("\\pi");

            else if(fabs(tmp_double - M_E) < Epsilon)
                TEX_PRINTF("e");

            else
                TEX_PRINTF("%.4lg", tmp_double);
            break;
        }

        case VAR: {

            Variable_data* tmp_var = NULL;
            memcpy(&tmp_var, &node_data->value, sizeof(Variable_data*));
            DEBUG_PRINTF("tmp_int = %p\n", tmp_var);
            DEBUG_PRINTF("tmp_int->var_len = %d\n", (size_t) tmp_var->var_len);
            DEBUG_PRINTF("tmp_int->var_name = %p\n", tmp_var->var_name);
            DEBUG_PRINTF("tmp_int->var_name(c) = %c\n", *(tmp_var->var_name));
            TEX_PRINTF("%.*s", (size_t) tmp_var->var_len, tmp_var->var_name);
            break;
        }

        default:
            DEBUG_PRINTF("ERROR: unknown expression type\n");
    }

    (*global_depth)--;
}

bool System_call_TeX(const char* output_file_name) {

    char command[] = "pdflatex C:\\Users\\mihai\\Documents\\VSCode\\Differentiator\\";
    int name_offset = 0;
    char* cmd_buffer = (char*) calloc(strlen(command) + 2 * strlen(output_file_name) + Calloc_add,
                                                                                     sizeof(char));
    if(!cmd_buffer) {

        return false;
        DEBUG_PRINTF("ERROR: memory was not allocated\n");
    }

    char* tmp_ptr = strchr(output_file_name, '.');

    if(!tmp_ptr) {

        DEBUG_PRINTF("ERROR: wrong filename format\n");
        return false;
    }

    if(tmp_ptr[1] == '\\') {

        tmp_ptr = strchr(tmp_ptr+1, '.');
        name_offset = 2;
        if(!tmp_ptr) {

            DEBUG_PRINTF("ERROR: wrong filename format\n");
            return false;
        }
    }

    memcpy(command, output_file_name+name_offset, tmp_ptr - output_file_name - name_offset);
    command[tmp_ptr-output_file_name - name_offset] = '\0';

    sprintf(cmd_buffer, "pdflatex C:\\Users\\mihai\\Documents\\VSCode\\Differentiator\\"
    "%s.tex", command);

    DEBUG_PRINTF("cmd_buffer = %s\n", cmd_buffer);
    system(cmd_buffer);
    sprintf(cmd_buffer, "%s.pdf", command);
    system(cmd_buffer);

    free(cmd_buffer);

    return true;
}
